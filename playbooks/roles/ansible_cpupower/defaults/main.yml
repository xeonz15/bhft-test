---
# Options:
#   - powersave: >
#       Run at fixed lowest possible frequency. Best power savings but also
#       worst possible performance.
#   - performance: >
#       Run at fixed highest possible frequency. Best performance, but
#       _no_ power savings
#   - ondemand: >
#       Aggressively scale the CPU frequency according to load.
#       Best compromise between power savings, performance and latency.
#       Best choice for most use cases.
#   - conservative: >
#       Conservatively scale the CPU frequency according to load.
#       Like ondemand, but sacrifices latency for better power efficiency
#       Good for low-power servers, raspberry pi's
cpupower_governor: ondemand

# FREQuencies  can  be passed in Hz, kHz (default), MHz, GHz, or THz
# by postfixing the value with the wanted unit name, without any space
# (frequency in kHz =^ Hz * 0.001 =^ MHz * 1000 =^ GHz * 1000000).
# "auto" means set Linux kernel defaults
# Only applicable for "ondemand" and "conservative" governors
cpupower_frequency_min: auto
cpupower_frequency_max: auto

# If this is set to true, low-priority (nice'd) processes will not cause
# the CPU's frequency to increase, thus saving power
# Only applicable for "ondemand" and "conservative" governors
cpupower_ignore_nice_load: false

# Measured in uS (10^-6 seconds), this is how often you want the kernel
# to look at the CPU usage and to make decisions on what to do about the
# frequency.  Typically this is set to values of around '10000' or more.
cpupower_sampling_rate: auto

# This defines what the average CPU usage between the samplings of
# 'sampling_rate' needs to be for the kernel to make a decision on
# whether it should increase the frequency.  For example when it is set
# to its default value of '95' it means that between the checking
# intervals the CPU needs to be on average more than 95% in use to then
# decide that the CPU frequency needs to be increased.
cpupower_up_threshold: auto

# This parameter controls the rate at which the kernel makes a decision
# on when to decrease the frequency while running at top speed. When set
# to 1 (the default) decisions to reevaluate load are made at the same
# interval regardless of current clock speed. But when set to greater
# than 1 (e.g. 100) it acts as a multiplier for the scheduling interval
# for reevaluating load when the CPU is at its top speed due to high
# load. This improves performance by reducing the overhead of load
# evaluation and helping the CPU stay at its top speed when truly busy,
# rather than shifting back and forth in speed. This tunable has no
# effect on behavior at lower speeds/lower CPU loads.
cpupower_sampling_down_factor: auto

# conservative governor
# This describes what percentage steps the cpu freq should be increased
# and decreased smoothly by.  By default the cpu frequency will increase
# in 5% chunks of your maximum cpu frequency.  You can change this value
# to anywhere between 0 and 100 where '0' will effectively lock your CPU
# at a speed regardless of its load whilst '100' will, in theory, make
# it behave identically to the "ondemand" governor.
cpupower_freq_step: auto

# conservative governor
# Same as the 'up_threshold' found for the "ondemand" governor but for
# the opposite direction.  For example when set to its default value of
# '20' it means that if the CPU usage needs to be below 20% between
# samples to have the frequency decreased.
cpupower_down_threshold: auto

# Name of the cpupower package to be installed.
# This is overriden in distribution-specific settings under vars/
cpupower_package_name: cpupower

# Filename of the script that applies cpupower settings.
# Started by the systemd service
cpupower_startup_script_filename: /usr/local/sbin/cpupower_apply.sh

# Where the kernel cpufreq interface is located
cpupower_cpufreq_sys_path: /sys/devices/system/cpu/cpufreq

# If this is set to false, cpupower, the related service and script
# will be uninstalled from the target system(s)
cpupower_installed: true

# Path to the cpupower binary,
# in case it needs to be overidden in specific setups / distributrions
cpupower_bin: /usr/bin/cpupower
